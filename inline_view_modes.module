<?php

/**
 * @file
 * Provide view mode selection on referenced entities.
 *
 * The Inline View Modes module will allow on entity reference fields the
 * ability to select a view mode to render the entity rather than the default
 * provided by the Manage Display settings.
 *
 * Integrations:
 * - entity_reference
 * - entity_reference_revisions
 * - @todo: inline_entity_form
 */

use Drupal\Core\Entity\Entity;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FormatterInterface;
use Drupal\Core\Field\WidgetInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;
use Drupal\field\Entity\FieldConfig;

/**
 * Implements hook_field_info_alter().
 *
 * Would like to figure a way to set the default formatter for an
 * entity_reference and entity_reference_revisions field under the following
 * conditions:
 * - IF and ONLY IF the field settings have enabled Inline View Modes.
 *
 * Appears there's nothing here to do but set the DEFAULT in all scenarios,
 * which isn't what we want.
 */
function inline_view_modes_field_info_alter(&$info) {

  if (isset($info['entity_reference'])) {

  }

  if (isset($info['entity_reference_revisions'])) {

  }
}

/**
 * Implements hook_field_widget_info_alter().
 */
function inline_view_modes_field_widget_info_alter(array &$info) {

}

/**
 * Implements hook_field_widget_third_party_settings_form().
 */
function inline_view_modes_field_widget_third_party_settings_form(WidgetInterface $plugin, FieldDefinitionInterface $field_definition, $form_mode, $form, FormStateInterface $form_state) {

}

/**
 * Implements hook_field_widget_settings_summary_alter().
 */
function inline_view_modes_field_widget_settings_summary_alter(&$summary, $context) {

}

/**
 * Implements hook_field_formatter_info_alter().
 */
function inline_view_modes_field_formatter_info_alter(array &$info) {

}

/**
 * Implements hook_field_formatter_settings_summary_alter().
 */
function inline_view_modes_field_formatter_settings_summary_alter(&$summary, $context) {

}

/**
 * Implements hook_field_formatter_third_party_settings_form().
 */
function inline_view_modes_field_formatter_third_party_settings_form(FormatterInterface $plugin, FieldDefinitionInterface $field_definition, $view_mode, $form, FormStateInterface $form_state) {

}

/**
 * Implements hook_form_alter().
 *
 * Generic hook_form_alter, primarily used for testing prior to converting to a
 * more specific hook_form_FORM_ID_alter or hook_form_BASE_FORM_ID_alter.
 */
function inline_view_modes_form_alter(&$form, FormStateInterface $form_state, $form_id) {

}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Implementations are responsible for adding cache contexts/tags/max-age as
 * needed. See https://www.drupal.org/developing/api/8/cache.
 *
 * By default, when \Drupal::formBuilder()->getForm() is called, Drupal looks
 * for a function with the same name as the form ID, and uses that function to
 * build the form. In contrast, base forms allow multiple form IDs to be mapped
 * to a single base (also called 'factory') form function.
 *
 * Modules can implement hook_form_BASE_FORM_ID_alter() to modify a specific
 * base form, rather than implementing hook_form_alter() and checking for
 * conditions that would identify the shared form constructor.
 *
 * To identify the base form ID for a particular form (or to determine whether
 * one exists) check the $form_state. The base form ID is stored under
 * $form_state->getBuildInfo()['base_form_id'].
 *
 * Form alter hooks are called in the following order: hook_form_alter(),
 * hook_form_BASE_FORM_ID_alter(), hook_form_FORM_ID_alter(). See
 * hook_form_alter() for more details.
 *
 * @see hook_form_alter()
 * @see hook_form_FORM_ID_alter()
 * @see \Drupal\Core\Form\FormBuilderInterface::prepareForm()
 *
 * @ingroup form_api
 */
function inline_view_modes_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {

}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Provides functionality to add ThirdPartySetting to appropriate fields for
 * enabling or disabling Inline View Modes on an entity.
 *
 * @todo: This is where we will work on the additional configuration for per reference or per field inline view modes.
 * - This will allow a field to select to add the View Mode to each reference
 *   added to a multivalue reference field, OR instead only supply a single
 *   view mode option for a set of multivalue references.
 * - The use case here is that if you are adding multiple references, it should
 *   likely be assumed that you would want them all rendered with the same view
 *   mode if then placing them in a grid, rotator, etc.
 * - However, if the reference field has multiple types of content to be
 *   referenced, then it's likely that each item would be a full width,
 *   standalone item, and then each could reference the appropriate view mode.
 * - In essense, it makes sense that when creating your entity reference fields
 *   that you think long and hard about the use case you have, and configure
 *   appropriately.
 */
function inline_view_modes_form_field_config_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  /** @var \Drupal\field_ui\Form\FieldConfigEditForm $form_object */
  $form_object = $form_state->getFormObject();
  /** @var \Drupal\field\Entity\FieldConfig $field */
  $field = $form_object->getEntity();

  // Return if we aren't looking at a field that we want.
  if (!inline_view_modes_is_allowed($field)) {
    return TRUE;
  }

  // Add the required Inline View Modes form elements.
  $form['inline_view_modes'] = [
    '#type' => 'details',
    '#attributes' => ['class' => ['inline_view_modes']],
    '#description' => t('<strong>Inline View Modes</strong> allows the content creator/editor to manipulate the display of a referenced entity. When setting display settings on the <em>Manage Display</em> tab, if the <strong>Referenced Entity w/View Mode</strong> is selected, the default view mode will be used if a referenced entity fails to specify a specific view mode.</strong>'),
    '#title' => t('Inline View Modes'),
    '#weight' => -5,
    '#open' => TRUE,
    '#tree' => FALSE,
  ];

  $form['enable_inline_view_modes'] = [
    '#type' => 'checkbox',
    '#title' => t('Enable <strong>Inline View Modes</strong> support.'),
    '#description' => t('Enable <strong>Inline View Modes</strong> for referenced entities.'),
    '#default_value' => $field->getThirdPartySetting('inline_view_modes', 'enable_inline_view_modes'),
    '#group' => 'inline_view_modes',
  ];

  $form['#entity_builders'][] = 'inline_view_modes_add_enable_config';
}

/**
 * Entity builder for the field configuration entity.
 *
 * Handles saving and removing the ThirdPartySetting on a config entity that
 * has selected to use (or stop using) Inline View Modes.
 *
 * @param string $entity_type
 *   Type of entity.
 * @param \Drupal\field\Entity\FieldConfig $field
 *   Field object.
 * @param array $form
 *   Form object array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   State of current form.
 */
function inline_view_modes_add_enable_config($entity_type, FieldConfig $field, array &$form, FormStateInterface $form_state) {

  if ($entity_type == 'field_config') {
    if ($form_state->getValue('enable_inline_view_modes')) {
      // Turn ON Inline View Modes for this field.
      $field->setThirdPartySetting('inline_view_modes', 'enable_inline_view_modes', $form_state->getValue('enable_inline_view_modes'));
      // @todo: Potential to update the default formatter here if possible.
      return;
    }

    // Turn OFF Inline View Modes for this field.
    $field->unsetThirdPartySetting('inline_view_modes', 'enable_inline_view_modes');
  }
}

/**
 * Implements hook_field_widget_form_alter().
 *
 * Alters Entity Reference fields to add functionality for selecting view mode.
 *
 * @todo: When setting the default options for entity reference, what about saving the entity id to the db?? (Store a zero as entity id??)
 *
 * @see \Drupal\Core\Field\WidgetBase::formSingleElement()
 * @see hook_field_widget_WIDGET_TYPE_form_alter()
 * @see https://www.drupal.org/node/1194484
 *   for Ajax info on widget forms. (D7)
 * @see https://www.drupal.org/node/1775464#comment-11764169
 */
function inline_view_modes_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  // @todo: Investigate ONLY firing on the Rendered Entity widget.
  // $base_form = $form_state->getBuildInfo()['base_form_id'];
  // $form_id = $form_state->getBuildInfo()['form_id'];
  /** @var \Drupal\node\NodeForm $form_object */
  // $form_object = $form_state->getFormObject();
  // Parent entity displaying the form.
  /** @var \Drupal\node\Entity\Node $node */
  // $entity = $form_object->getEntity();
  /** @var \Drupal\field\Entity\FieldConfig $field_config */
  $field_config = $context['items']->getFieldDefinition();
  $field_type = $field_config->getType();

  switch ($field_type) {
    // Support for core entity_reference field.
    case 'entity_reference':
      // Support for entity_reference_revisions module.
    case 'entity_reference_revisions':

      // @todo: Investigate $field_config issue further.
      // Sometimes $field_config is of type: \Drupal\field\Entity\FieldConfig
      // And other times it is of type: \Drupal\Core\Field\BaseFieldDefinition
      // Hence the method_exists() call to $field_config, 'getThirdPartySetting'
      if (method_exists($field_config, 'getThirdPartySetting') && $field_config->getThirdPartySetting('inline_view_modes', 'enable_inline_view_modes')) {
        // Assign the delta value to determine item being iterated.
        $delta = $context['delta'];
        /** @var \Drupal\Core\Field\EntityReferenceFieldItemList $items */
        $items = $context['items'];
        $field_name = $items->getName();
        /** @var \Drupal\Core\Field\Plugin\Field\FieldType\EntityReferenceItem $thisItem */
        $thisItem = $items->get($delta);

        // Happens AFTER a first pass where values are empty.
        $values = $form_state->getValues();

        // @todo: Getting the referenced entity ID fails in many scenarios.
        // Grab the Entity Id for the STORED item.
        $referenced_entity_id = isset($thisItem->getValue()['target_id']) ? $thisItem->getValue()['target_id'] : FALSE;

        // An empty reference field has been filled out, or has been changed.
        if (isset($values[$field_name][$delta]['target_id'])) {
          $referenced_entity_id = $values[$field_name][$delta]['target_id'];
          $default_value = isset($values[$field_name][$delta]['inline_view_mode']) ? $values[$field_name][$delta]['inline_view_mode'] : 'default';
        }
        else {
          // @todo: When in Paragraphs, values are under [$parent_paragraph_field][$delta]['subform'][$field_name]
          // Going to require additional items to figure out here.
          $default_value = isset($values[$field_name][$delta]['inline_view_mode']) ? $values[$field_name][$delta]['inline_view_mode'] : 'default';
        }

        $entity_data = FALSE;
        if ($referenced_entity_id) {
          // @todo: Assign some functionality to ensure the Entity ID is found if it exists.
          $entity_data = inline_view_modes_get_entity_type($referenced_entity_id);
        }

        $title = t('View Mode');
        $description = $entity_data ? t('Select the appropriate View Mode for the referenced <em><strong>@label</strong></em>, <em>@title</em>.', ['@label' => $entity_data['label'], '@title' => $entity_data['title']]) : t('Enter a reference first...');
        $field_parents = isset($element['target_id']['#field_parents']) ? $element['target_id']['#field_parents'] : [];

        // Add the View Mode field.
        // @todo: Enable #states and appropriate AJAX needed for FULL functionality.
        // make two versions, one without states hidden, and if it's an empty
        // field, hide the form element.
        $element['inline_view_mode'] = [
          '#title' => $title,
          '#prefix' => '<div id="inline-view-modes-wrapper-' . $delta . '">',
          '#suffix' => '</div>',
          '#type' => 'select',
          '#delta' => $delta,
          '#options' => inline_view_modes_view_mode_form_options($referenced_entity_id),
          '#description' => $description,
          '#default_value' => $default_value,
          '#field_parents' => $field_parents,
          '#weight' => 10,
          '#element_validate' => [
            'inline_view_modes_field_widget_form_validate',
          ],
        ];

        // Alter the target_id field to add the appropriate AJAX handlers.
        if (isset($element['target_id'])) {
          $element['target_id']['#prefix'] = '<div id="inline-view-modes-widget-wrapper-' . $delta . '">';
          $element['target_id']['#suffix'] = '</div>';

          $element['target_id']['#ajax'] = [
            'event' => 'autocompleteclose',
            'callback' => 'inline_view_mode_widget_autocomplete_callback',
            'wrapper' => 'inline-view-modes-wrapper-' . $delta,
          ];
        }
      }

      break;
  }
}

/**
 * Implements #element_validate for inline_view_modes_field_widget_form_alter.
 *
 * Validation here should simply handle doing a final check on the view mode
 * and target_id combination to ensure that they are still a match. This event
 * shouldn't ever fail as the AJAX callback should handle all this and only
 * allow the proper view modes to be selected.
 *
 * Also, here we assign an additional submit handler for the entire form. While
 * the validation can be assigned in widget_form_alter, there's no option to
 * also assign a submit handler for the element:
 * @code
 * '#element_validate' => [
 *   'inline_view_modes_field_widget_form_validate',
 * ],
 * @endcode
 * Also note that $form_state->setSubmitHandlers($submit_handlers); and
 * $form_state->setValidateHandlers($submit_handlers); do nothing when fired
 * inside of hook_field_widget_form_alter, so this method is the only I've found
 * that will actually attach the submit handler without using a standard
 * hook_form_alter, and then having to cycle over every field of every form to
 * determine if it is the appropriate type with the appropriate settings to
 * apply functionality to.
 *
 * @param array $element
 *   Element array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state object.
 */
function inline_view_modes_field_widget_form_validate(array $element, FormStateInterface &$form_state) {
  // $values = $form_state->getValues();
  // $triggering_element = $form_state->getTriggeringElement();
  // Add in custom submit handler for Inline View Modes.
  $submit_handlers = $form_state->getSubmitHandlers();
  // Why is $submit_handlers[0] where the previous ones live??
  // Perhaps it seems the submithandlers is set to zero when we want it without
  // any other handlers.
  if (!in_array('inline_view_modes_field_widget_form_submit', $submit_handlers)) {
    $submit_handlers[] = 'inline_view_modes_field_widget_form_submit';
    $form_state->setSubmitHandlers($submit_handlers);
  }
}

/**
 * Submit handler for inline_view_modes_field_widget_form_alter.
 *
 * @param array $form
 *   Form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state object.
 */
function inline_view_modes_field_widget_form_submit(array $form, FormStateInterface $form_state) {
  $triggering_element = $form_state->getTriggeringElement();
  $submitted = $form_state->isSubmitted();
  // Get the item that triggered the submit, and ensure it's not 'add_more'.
  $submit_item = array_pop($triggering_element['#parents']);

  if ($submitted && $submit_item != 'add_more') {
    // $values = $form_state->getValues();
  }
}

/**
 * Callback function for inline_view_modes_field_widget_form_alter.
 *
 * Provides callback functionality to grab the appropriate view modes after
 * and entity has been referenced in an autocomplete field.
 *
 * @param array $form
 *   Form object array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   State of current form.
 *
 * @return mixed
 *   Returns appropriate portion of $form to rebuild via AJAX.
 */
function inline_view_mode_widget_autocomplete_callback(array $form, FormStateInterface $form_state) {
  // @todo: Need some error checking/defensive coding in this callback.
  // @todo: This is where the issue with Paragraphs / nested items failing to return the IVM field when first adding the reference.
  $triggering_element = $form_state->getTriggeringElement();

  // Figure out which part of the form to return.
  $form_array_parents = $triggering_element['#array_parents'];
  array_pop($form_array_parents);
  $form_field = $form;
  foreach ($form_array_parents as $parent) {
    // The form field we'll be using/returning.
    $form_field = $form_field[$parent];
  }

  // Figure out the right value to look for in the array.
  $target_value = $form_state->getValues();
  $form_value_parents = $triggering_element['#parents'];
  foreach ($form_value_parents as $parent) {
    $target_value = $target_value[$parent];
  }
  $referenced_entity_id = $target_value['target_id'];

  // Get the allowed/enabled View Modes for the specific entity.
  $allowed_view_modes = inline_view_modes_view_mode_form_options($referenced_entity_id);
  // Alter the options in the View Mode selector.
  $form_field['inline_view_mode']['#options'] = $allowed_view_modes;

  // Assign the previously assigned default view mode assuming the reference is
  // of the same type, thus having the same view modes available. Otherwise, we
  // need to reset it back to default.
  $default_value = isset($target_value['inline_view_mode']) && in_array($target_value['inline_view_mode'], $allowed_view_modes) ? $target_value['inline_view_mode'] : 'default';
  $form_field['inline_view_mode']['#default_value'] = $default_value;
  return $form_field['inline_view_mode'];
}

/**
 * Function to return valid options for <select> on an Inline View Modes field.
 *
 * Given an $entity_id value, determine the allowed / used view modes by the
 * particular bundle.
 *
 * To send an ENTITY_ID to this function, it should either be the entity_id
 * or FALSE:
 *
 * @code
 * $referenced_entity_id = isset(ENTITY_ID) ? ENTITY_ID : FALSE;
 * @endcode
 *
 * @param int $entity_id
 *   The Entity ID to gather available options for.
 *
 * @return array
 *   Array of View Modes ready for use in select or checkbox form element.
 */
function inline_view_modes_view_mode_form_options($entity_id) {

  if ($entity_id) {
    // Here we have an existing item. Let's get the right view modes.
    // @todo: This shouldn't likely use the Node class, but the Entity parent class instead.
    /** @var \Drupal\Core\Entity\Entity $entity */
    $entity = Node::load($entity_id);

    // Need to do if (is Class 'node'/'paragraph', etc.) to handle the logic.
    // $bundle = $entity->bundle();
    $entity_bundle = $entity->getType();
    $entity_type_id = $entity->getEntityTypeId();
    $entity_view_modes_by_bundle = \Drupal::entityManager()->getViewModeOptionsByBundle($entity_type_id, $entity_bundle);
    return $entity_view_modes_by_bundle;
  }
  // Provide 'default' view mode as default, then additional appropriate
  // view modes as needed to the array.
  return [
    'default' => 'Default',
  ];
}

/**
 * Function to return TRUE/FALSE if Inline View Modes are allowed.
 *
 * Custom function to check $field against an array of $allowed_field_types and
 * $allowed_entity_types to determine if the field is capable/allowed to use
 * Inline View Modes.
 *
 * Possible future additions to $allowed_parent_entity_types and
 * $allowed_target_entity_types:
 * - comment -> Comment
 * - block_content -> Custom Block
 * - node -> Content
 * - content_moderation_state -> Content moderation state
 * - taxonomy_term -> Taxonomy term
 * - user -> User
 * - paragraph -> Paragraph
 *
 * The following code demonstrates finding the appropriate parent/target entity.
 * @code
 * $parent_entity = $field->getTargetEntityTypeId();
 * $target_type = $field->getSetting('target_type');
 * @endcode
 *
 * @param \Drupal\field\Entity\FieldConfig $field
 *   Field entity used to determine if Inline View Modes is enabled.
 *
 * @todo: Integrate permissions?
 * @todo: Expand $allowed_parent_entity_types & $allowed_target_entity_types available.
 * @todo: Refactor target/parent entity type logic to be more appropriate.
 *   This should likely be more like the following:
 *   - IF the PARENT entity allows the entity_reference field, then it shouldn't
 *     matter or require a check and would be fine to PROCEED.
 *   - IF the TARGET entity is a Content Entity that allows/has view modes,
 *     then it should be fine to PROCEED.
 *   - IF the FIELD type is one of the ones we want, PROCEED.
 *
 * @return bool
 *   If Inline View Modes is allowed or not.
 */
function inline_view_modes_is_allowed(FieldConfig $field) {
  // Allowed entity types capable of adding Inline View Modes functionality to.
  $allowed_parent_entity_types = [
    'node',
    'paragraph',
  ];
  // Array of content entities with view modes.
  $allowed_target_entity_types = inline_view_modes_get_entities_with_view_modes();
  // Allowed field types capable of adding Inline View Modes functionality to.
  $allowed_field_types = [
    'entity_reference',
    'entity_reference_revisions',
  ];

  $field_type = $field->getType();
  $parent_entity_type = $field->getTargetEntityTypeId();
  $target_entity_type = $field->getSetting('target_type');

  if (in_array($field_type, $allowed_field_types) && in_array($parent_entity_type, $allowed_parent_entity_types) && in_array($target_entity_type, $allowed_target_entity_types)) {
    // Return TRUE if we found a field type/parent entity type that we want.
    return TRUE;
  }
  // Return FALSE if this isn't in our allowed values arrays.
  return FALSE;
}

/**
 * Function to return an array of entity type ids that contain view modes.
 *
 * @return array
 *   An array containing all content entities that register view modes, keyed
 *   by entity_id.
 */
function inline_view_modes_get_entities_with_view_modes() {
  $entity_types = \Drupal::entityManager()->getDefinitions();
  $content_entities_with_view_modes = [];
  foreach ($entity_types as $id => $entity_type) {
    if ($entity_type->getGroup() == 'content') {
      $entity_view_modes = \Drupal::entityManager()->getViewModes($id);
      if (count($entity_view_modes) > 0) {
        $content_entities_with_view_modes[$id] = $id;
      }
    }
  }
  return $content_entities_with_view_modes;
}

/**
 * Returns the entity type when supplied an entity id.
 *
 * @param int $eid
 *   Entity ID to find the entity type for.
 *
 * @return mixed
 *   Array containing the following:
 *   - label
 *   - title
 *   Or false.
 */
function inline_view_modes_get_entity_type($eid) {
  // @todo: Entity::load() Needs urgent refactor/debugging.
  $entity = Node::load($eid);
  $type = $entity->getEntityTypeId();

  $entity_label = FALSE;
  $entity_title = FALSE;

  switch ($type) {
    case 'node':
      // Label of the Node Type.
      $entity_label = $entity->type->entity->label();
      // Title of the Node.
      $entity_title = $entity->label();
      break;
  }

  if ($entity_label && $entity_title) {
    return [
      'label' => $entity_label,
      'title' => $entity_title,
    ];
  }
  return FALSE;
}
